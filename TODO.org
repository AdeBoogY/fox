* DONE 1й уровень -- connection
  + app, sup
    + connection_pool_sup
      + connection_sup (register with ConnectionName, run Num connection_worker)
  + динамическое создание новых соединений и остановка их
    для каждого {ConnectionName, #amqp_network_params{}} нужно создать connection_sup
    и под ним несколько connection_worker
  + connect
  + reconnect
  + close connection
  + monitor connection


* DONE 2й уровень -- channel
  + create channel
    + по ConnectionName выбрать нужный connection_sup
    + для этого sup обойти все его connection_worker
      и выбрать тот, у кого меньше всего channel

  + subscribe
    + channel_sup (simple_one_for_one), run fox_channel_consumer
    + fox_channel_consumer и  behaviour
    + behaviour будет простой: init и handle
      handle будет получать все возможные события.
    + validate behaviour
    + sample_consumer:init -- declare exchange/queue, bind
    + channel_worker
      и редиректить события в behaviour (sample_consumer)
      передавая туда еще и ChannelPid

  + в test_run наладить публикацию и подписку,
    чтобы получать события в sample_consumer
    + создать канал для sample_consumer
    + в init создать exchange, queue, bind
    + послать сообщение через другой канал
    + получить в sample_consumer

  + unsubscribe
    + по ChannelPid найти нужный connection_worker
      можно тупо дернуть всех, а сработает тот, кому принадлежит ChannelPid
    + connection_worker должен хранить в своем состоянии все {ChannelPid, SubscriberPid}
    + вызывать fox_channel_consumer:stop
    + вызывать sample_channel_consumer:terminate


* DONE 3й уровень -- сценарии использования channel

* DONE Мониторинг:

* common tests
- create_connection_pool
- close_connection_pool
- subscribe - publish - unsubscribe


* README

- документация на весь АПИ
  - fox:create_channel/1 -- за канал отвечает потребитель, либа дальше этот канал не использует и не мониторит
    close_channel в АПИ не выставляем, пользователь может вызывать сам amqp_channel:close(Pid)

- как работает либа (структура потоков и т.д.)

- samples


* на следующие версии:

- publish with confirmation (не документарован, нужно разбираться)
  https://www.rabbitmq.com/confirms.html

- fox_connection_worker должен мониторить channel и fox_channel_consumer
  перезапускать их, если они упали, заново объявлять и связывать, если нужно


* info
http://www.rabbitmq.com/erlang-client-user-guide.html
https://www.rabbitmq.com/confirms.html
