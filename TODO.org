* DONE 1й уровень -- connection
  + app, sup
    + connection_pool_sup
      + connection_sup (register with ConnectionName, run Num connection_worker)
  + динамическое создание новых соединений и остановка их
    для каждого {ConnectionName, #amqp_network_params{}} нужно создать connection_sup
    и под ним несколько connection_worker
  + connect
  + reconnect
  + close connection
  + monitor connection

* 2й уровень -- channel
  + channel_sup (simple_one_for_one), run channel_worker
  - создание channel и channel_worker по требованию
    + по ConnectionName выбрать нужный connection_sup
    + для этого sup обойти все его connection_worker
      и выбрать тот, у кого меньше всего channel
  - sample_consumer implements amqp_gen_consumer
    + передавать на open_channel
      amqp_connection:open_channel(ConnectionPid, ChannelNumber, {_ConsumerModule, _ConsumerArgs} = Consumer) ->
    - check module implements behaviour
    - create sample_consumer module
    - что такое consumer_tag?
    - в test_run наладить публикацию и подписку,
      чтобы получать события в sample_consumer
    - нужно ли мне как-то хранить пару {ChannelPid, SampleConsumerPid}?
  - fox_channel_sup кажись не нужен
  - наверное, еще нужна упрощенная альтернатива для sample_consumer
    чтобы не реализовывать весь behaviour полностью, а только часть его
  - amqp_channel:subscribe тож надо бы вынести и АПИ


** АПИ 2-го уровня:
  - create_channel(ConnectionName) -> ChannelPid
  - close_channel(ConnectionName, ChannelPid) -> ok

* 3й уровень -- сценарии использования channel
  channel_worker хранит внутри себя channel (свой собственный, экслюзивный)
  и предоставляет АПИ для основных сценариев:
  - publish (async)
  - publish with confirmation (не документарован, нужно разбираться)
  - declare exchange, declare queue, bind queue
  - subscribe
    behaviour amqp_subscriber (придумать название)
    - init(ChannelPid) -> State. Тут делать все declare и bind
    - handle_message(Message, ChannelPid, State)
    sample_subscriber модуль, включить в либу, использовать в тестах
  - unsubscribe
  сделаю везде мапы как альтернативу рекордам

** АПИ 3-го уровня нужно продумать:
  - publish(ChannelPid, Data) ?
  - publish_with_confirmation?
    https://www.rabbitmq.com/confirms.html
  - subscribe(ChannelPid, callback, #amqp_consumer{}) ?
    behaviour amqp_consumer
    process_data(ChannelPid, Data) -> ack | reject
    unsubscribe() ?
  - declare exchange, queue, bind

* Мониторинг:
  - connection_worker должен мониторить channel и channel_worker
    перезапускать их, если они упали, заново объявлять и связывать, если нужно
  - connection_worker после reconnect должен создать новые channel и раздать их channel_worker
    ну и те должны заново инициализироваться

* README
документация на весь АПИ
- fox:create_channel/1 -- за канал отвечает потребитель, либа дальше этот канал не использует и не мониторит
как работает либа (структура потоков и т.д.)
- amqp_channel:subscribe мы в АПИ не выставляем, но пользователь может сделать это сам,
  получив канал через create_channel

* samples

* info
http://www.rabbitmq.com/erlang-client-user-guide.html
https://www.rabbitmq.com/confirms.html
